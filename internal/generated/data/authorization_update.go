// Code generated by ent, DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/predicate"
)

// AuthorizationUpdate is the builder for updating Authorization entities.
type AuthorizationUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationMutation
}

// Where appends a list predicates to the AuthorizationUpdate builder.
func (au *AuthorizationUpdate) Where(ps ...predicate.Authorization) *AuthorizationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetKind sets the "kind" field.
func (au *AuthorizationUpdate) SetKind(a authorization.Kind) *AuthorizationUpdate {
	au.mutation.SetKind(a)
	return au
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (au *AuthorizationUpdate) SetNillableKind(a *authorization.Kind) *AuthorizationUpdate {
	if a != nil {
		au.SetKind(*a)
	}
	return au
}

// Mutation returns the AuthorizationMutation object of the builder.
func (au *AuthorizationUpdate) Mutation() *AuthorizationMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthorizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthorizationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthorizationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthorizationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthorizationUpdate) check() error {
	if v, ok := au.mutation.Kind(); ok {
		if err := authorization.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`data: validator failed for field "Authorization.kind": %w`, err)}
		}
	}
	if _, ok := au.mutation.PersonID(); au.mutation.PersonCleared() && !ok {
		return errors.New(`data: clearing a required unique edge "Authorization.person"`)
	}
	return nil
}

func (au *AuthorizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorization.Table, authorization.Columns, sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Kind(); ok {
		_spec.SetField(authorization.FieldKind, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthorizationUpdateOne is the builder for updating a single Authorization entity.
type AuthorizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationMutation
}

// SetKind sets the "kind" field.
func (auo *AuthorizationUpdateOne) SetKind(a authorization.Kind) *AuthorizationUpdateOne {
	auo.mutation.SetKind(a)
	return auo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (auo *AuthorizationUpdateOne) SetNillableKind(a *authorization.Kind) *AuthorizationUpdateOne {
	if a != nil {
		auo.SetKind(*a)
	}
	return auo
}

// Mutation returns the AuthorizationMutation object of the builder.
func (auo *AuthorizationUpdateOne) Mutation() *AuthorizationMutation {
	return auo.mutation
}

// Where appends a list predicates to the AuthorizationUpdate builder.
func (auo *AuthorizationUpdateOne) Where(ps ...predicate.Authorization) *AuthorizationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthorizationUpdateOne) Select(field string, fields ...string) *AuthorizationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Authorization entity.
func (auo *AuthorizationUpdateOne) Save(ctx context.Context) (*Authorization, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthorizationUpdateOne) SaveX(ctx context.Context) *Authorization {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthorizationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthorizationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthorizationUpdateOne) check() error {
	if v, ok := auo.mutation.Kind(); ok {
		if err := authorization.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`data: validator failed for field "Authorization.kind": %w`, err)}
		}
	}
	if _, ok := auo.mutation.PersonID(); auo.mutation.PersonCleared() && !ok {
		return errors.New(`data: clearing a required unique edge "Authorization.person"`)
	}
	return nil
}

func (auo *AuthorizationUpdateOne) sqlSave(ctx context.Context) (_node *Authorization, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorization.Table, authorization.Columns, sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`data: missing "Authorization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorization.FieldID)
		for _, f := range fields {
			if !authorization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("data: invalid field %q for query", f)}
			}
			if f != authorization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Kind(); ok {
		_spec.SetField(authorization.FieldKind, field.TypeEnum, value)
	}
	_node = &Authorization{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
