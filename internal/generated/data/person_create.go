// Code generated by ent, DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avptp/brain/internal/generated/data/authentication"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/person"
	"github.com/google/uuid"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (pc *PersonCreate) SetEmail(s string) *PersonCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (pc *PersonCreate) SetEmailVerifiedAt(t time.Time) *PersonCreate {
	pc.mutation.SetEmailVerifiedAt(t)
	return pc
}

// SetNillableEmailVerifiedAt sets the "email_verified_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableEmailVerifiedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetEmailVerifiedAt(*t)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PersonCreate) SetPhone(s string) *PersonCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePhone(s *string) *PersonCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetPassword sets the "password" field.
func (pc *PersonCreate) SetPassword(s string) *PersonCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// SetTaxID sets the "tax_id" field.
func (pc *PersonCreate) SetTaxID(s string) *PersonCreate {
	pc.mutation.SetTaxID(s)
	return pc
}

// SetFirstName sets the "first_name" field.
func (pc *PersonCreate) SetFirstName(s string) *PersonCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PersonCreate) SetLastName(s string) *PersonCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastName(s *string) *PersonCreate {
	if s != nil {
		pc.SetLastName(*s)
	}
	return pc
}

// SetLanguage sets the "language" field.
func (pc *PersonCreate) SetLanguage(s string) *PersonCreate {
	pc.mutation.SetLanguage(s)
	return pc
}

// SetBirthdate sets the "birthdate" field.
func (pc *PersonCreate) SetBirthdate(t time.Time) *PersonCreate {
	pc.mutation.SetBirthdate(t)
	return pc
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBirthdate(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetBirthdate(*t)
	}
	return pc
}

// SetGender sets the "gender" field.
func (pc *PersonCreate) SetGender(pe person.Gender) *PersonCreate {
	pc.mutation.SetGender(pe)
	return pc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pc *PersonCreate) SetNillableGender(pe *person.Gender) *PersonCreate {
	if pe != nil {
		pc.SetGender(*pe)
	}
	return pc
}

// SetAddress sets the "address" field.
func (pc *PersonCreate) SetAddress(s string) *PersonCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pc *PersonCreate) SetNillableAddress(s *string) *PersonCreate {
	if s != nil {
		pc.SetAddress(*s)
	}
	return pc
}

// SetPostalCode sets the "postal_code" field.
func (pc *PersonCreate) SetPostalCode(s string) *PersonCreate {
	pc.mutation.SetPostalCode(s)
	return pc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePostalCode(s *string) *PersonCreate {
	if s != nil {
		pc.SetPostalCode(*s)
	}
	return pc
}

// SetCity sets the "city" field.
func (pc *PersonCreate) SetCity(s string) *PersonCreate {
	pc.mutation.SetCity(s)
	return pc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCity(s *string) *PersonCreate {
	if s != nil {
		pc.SetCity(*s)
	}
	return pc
}

// SetCountry sets the "country" field.
func (pc *PersonCreate) SetCountry(s string) *PersonCreate {
	pc.mutation.SetCountry(s)
	return pc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCountry(s *string) *PersonCreate {
	if s != nil {
		pc.SetCountry(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PersonCreate) SetID(u uuid.UUID) *PersonCreate {
	pc.mutation.SetID(u)
	return pc
}

// AddAuthenticationIDs adds the "authentications" edge to the Authentication entity by IDs.
func (pc *PersonCreate) AddAuthenticationIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddAuthenticationIDs(ids...)
	return pc
}

// AddAuthentications adds the "authentications" edges to the Authentication entity.
func (pc *PersonCreate) AddAuthentications(a ...*Authentication) *PersonCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAuthenticationIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the Authorization entity by IDs.
func (pc *PersonCreate) AddAuthorizationIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddAuthorizationIDs(ids...)
	return pc
}

// AddAuthorizations adds the "authorizations" edges to the Authorization entity.
func (pc *PersonCreate) AddAuthorizations(a ...*Authorization) *PersonCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAuthorizationIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if person.DefaultCreatedAt == nil {
			return fmt.Errorf("data: uninitialized person.DefaultCreatedAt (forgotten import data/runtime?)")
		}
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if person.DefaultUpdatedAt == nil {
			return fmt.Errorf("data: uninitialized person.DefaultUpdatedAt (forgotten import data/runtime?)")
		}
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`data: missing required field "Person.email"`)}
	}
	if v, ok := pc.mutation.Email(); ok {
		if err := person.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`data: validator failed for field "Person.email": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := person.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`data: validator failed for field "Person.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`data: missing required field "Person.password"`)}
	}
	if _, ok := pc.mutation.TaxID(); !ok {
		return &ValidationError{Name: "tax_id", err: errors.New(`data: missing required field "Person.tax_id"`)}
	}
	if v, ok := pc.mutation.TaxID(); ok {
		if err := person.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`data: validator failed for field "Person.tax_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`data: missing required field "Person.first_name"`)}
	}
	if v, ok := pc.mutation.FirstName(); ok {
		if err := person.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`data: validator failed for field "Person.first_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.LastName(); ok {
		if err := person.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`data: validator failed for field "Person.last_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`data: missing required field "Person.language"`)}
	}
	if v, ok := pc.mutation.Gender(); ok {
		if err := person.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`data: validator failed for field "Person.gender": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Address(); ok {
		if err := person.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`data: validator failed for field "Person.address": %w`, err)}
		}
	}
	if v, ok := pc.mutation.PostalCode(); ok {
		if err := person.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`data: validator failed for field "Person.postal_code": %w`, err)}
		}
	}
	if v, ok := pc.mutation.City(); ok {
		if err := person.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`data: validator failed for field "Person.city": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Country(); ok {
		if err := person.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`data: validator failed for field "Person.country": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`data: missing required field "Person.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`data: missing required field "Person.updated_at"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(person.Table, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.EmailVerifiedAt(); ok {
		_spec.SetField(person.FieldEmailVerifiedAt, field.TypeTime, value)
		_node.EmailVerifiedAt = &value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(person.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.SetField(person.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := pc.mutation.TaxID(); ok {
		_spec.SetField(person.FieldTaxID, field.TypeString, value)
		_node.TaxID = value
	}
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
		_node.LastName = &value
	}
	if value, ok := pc.mutation.Language(); ok {
		_spec.SetField(person.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := pc.mutation.Birthdate(); ok {
		_spec.SetField(person.FieldBirthdate, field.TypeTime, value)
		_node.Birthdate = &value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(person.FieldGender, field.TypeEnum, value)
		_node.Gender = &value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(person.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := pc.mutation.PostalCode(); ok {
		_spec.SetField(person.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = &value
	}
	if value, ok := pc.mutation.City(); ok {
		_spec.SetField(person.FieldCity, field.TypeString, value)
		_node.City = &value
	}
	if value, ok := pc.mutation.Country(); ok {
		_spec.SetField(person.FieldCountry, field.TypeString, value)
		_node.Country = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(person.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(person.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.AuthenticationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AuthenticationsTable,
			Columns: []string{person.AuthenticationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AuthorizationsTable,
			Columns: []string{person.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
