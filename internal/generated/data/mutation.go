// Code generated by ent, DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/avptp/brain/internal/generated/data/authentication"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/person"
	"github.com/avptp/brain/internal/generated/data/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthentication = "Authentication"
	TypeAuthorization  = "Authorization"
	TypePerson         = "Person"
)

// AuthenticationMutation represents an operation that mutates the Authentication nodes in the graph.
type AuthenticationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	token         *[]byte
	created_ip    *string
	last_used_ip  *string
	created_at    *time.Time
	last_used_at  *time.Time
	clearedFields map[string]struct{}
	person        *uuid.UUID
	clearedperson bool
	done          bool
	oldValue      func(context.Context) (*Authentication, error)
	predicates    []predicate.Authentication
}

var _ ent.Mutation = (*AuthenticationMutation)(nil)

// authenticationOption allows management of the mutation configuration using functional options.
type authenticationOption func(*AuthenticationMutation)

// newAuthenticationMutation creates new mutation for the Authentication entity.
func newAuthenticationMutation(c config, op Op, opts ...authenticationOption) *AuthenticationMutation {
	m := &AuthenticationMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthentication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthenticationID sets the ID field of the mutation.
func withAuthenticationID(id uuid.UUID) authenticationOption {
	return func(m *AuthenticationMutation) {
		var (
			err   error
			once  sync.Once
			value *Authentication
		)
		m.oldValue = func(ctx context.Context) (*Authentication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Authentication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthentication sets the old Authentication of the mutation.
func withAuthentication(node *Authentication) authenticationOption {
	return func(m *AuthenticationMutation) {
		m.oldValue = func(context.Context) (*Authentication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthenticationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthenticationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("data: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Authentication entities.
func (m *AuthenticationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthenticationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthenticationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Authentication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPersonID sets the "person_id" field.
func (m *AuthenticationMutation) SetPersonID(u uuid.UUID) {
	m.person = &u
}

// PersonID returns the value of the "person_id" field in the mutation.
func (m *AuthenticationMutation) PersonID() (r uuid.UUID, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonID returns the old "person_id" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldPersonID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPersonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPersonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonID: %w", err)
	}
	return oldValue.PersonID, nil
}

// ResetPersonID resets all changes to the "person_id" field.
func (m *AuthenticationMutation) ResetPersonID() {
	m.person = nil
}

// SetToken sets the "token" field.
func (m *AuthenticationMutation) SetToken(b []byte) {
	m.token = &b
}

// Token returns the value of the "token" field in the mutation.
func (m *AuthenticationMutation) Token() (r []byte, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldToken(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *AuthenticationMutation) ResetToken() {
	m.token = nil
}

// SetCreatedIP sets the "created_ip" field.
func (m *AuthenticationMutation) SetCreatedIP(s string) {
	m.created_ip = &s
}

// CreatedIP returns the value of the "created_ip" field in the mutation.
func (m *AuthenticationMutation) CreatedIP() (r string, exists bool) {
	v := m.created_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedIP returns the old "created_ip" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldCreatedIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedIP: %w", err)
	}
	return oldValue.CreatedIP, nil
}

// ResetCreatedIP resets all changes to the "created_ip" field.
func (m *AuthenticationMutation) ResetCreatedIP() {
	m.created_ip = nil
}

// SetLastUsedIP sets the "last_used_ip" field.
func (m *AuthenticationMutation) SetLastUsedIP(s string) {
	m.last_used_ip = &s
}

// LastUsedIP returns the value of the "last_used_ip" field in the mutation.
func (m *AuthenticationMutation) LastUsedIP() (r string, exists bool) {
	v := m.last_used_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedIP returns the old "last_used_ip" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldLastUsedIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedIP: %w", err)
	}
	return oldValue.LastUsedIP, nil
}

// ResetLastUsedIP resets all changes to the "last_used_ip" field.
func (m *AuthenticationMutation) ResetLastUsedIP() {
	m.last_used_ip = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthenticationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthenticationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthenticationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *AuthenticationMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *AuthenticationMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the Authentication entity.
// If the Authentication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthenticationMutation) OldLastUsedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *AuthenticationMutation) ResetLastUsedAt() {
	m.last_used_at = nil
}

// ClearPerson clears the "person" edge to the Person entity.
func (m *AuthenticationMutation) ClearPerson() {
	m.clearedperson = true
	m.clearedFields[authentication.FieldPersonID] = struct{}{}
}

// PersonCleared reports if the "person" edge to the Person entity was cleared.
func (m *AuthenticationMutation) PersonCleared() bool {
	return m.clearedperson
}

// PersonIDs returns the "person" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonID instead. It exists only for internal usage by the builders.
func (m *AuthenticationMutation) PersonIDs() (ids []uuid.UUID) {
	if id := m.person; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPerson resets all changes to the "person" edge.
func (m *AuthenticationMutation) ResetPerson() {
	m.person = nil
	m.clearedperson = false
}

// Where appends a list predicates to the AuthenticationMutation builder.
func (m *AuthenticationMutation) Where(ps ...predicate.Authentication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthenticationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthenticationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Authentication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthenticationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthenticationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Authentication).
func (m *AuthenticationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthenticationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.person != nil {
		fields = append(fields, authentication.FieldPersonID)
	}
	if m.token != nil {
		fields = append(fields, authentication.FieldToken)
	}
	if m.created_ip != nil {
		fields = append(fields, authentication.FieldCreatedIP)
	}
	if m.last_used_ip != nil {
		fields = append(fields, authentication.FieldLastUsedIP)
	}
	if m.created_at != nil {
		fields = append(fields, authentication.FieldCreatedAt)
	}
	if m.last_used_at != nil {
		fields = append(fields, authentication.FieldLastUsedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthenticationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authentication.FieldPersonID:
		return m.PersonID()
	case authentication.FieldToken:
		return m.Token()
	case authentication.FieldCreatedIP:
		return m.CreatedIP()
	case authentication.FieldLastUsedIP:
		return m.LastUsedIP()
	case authentication.FieldCreatedAt:
		return m.CreatedAt()
	case authentication.FieldLastUsedAt:
		return m.LastUsedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthenticationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authentication.FieldPersonID:
		return m.OldPersonID(ctx)
	case authentication.FieldToken:
		return m.OldToken(ctx)
	case authentication.FieldCreatedIP:
		return m.OldCreatedIP(ctx)
	case authentication.FieldLastUsedIP:
		return m.OldLastUsedIP(ctx)
	case authentication.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case authentication.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Authentication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthenticationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authentication.FieldPersonID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonID(v)
		return nil
	case authentication.FieldToken:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case authentication.FieldCreatedIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedIP(v)
		return nil
	case authentication.FieldLastUsedIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedIP(v)
		return nil
	case authentication.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case authentication.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Authentication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthenticationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthenticationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthenticationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Authentication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthenticationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthenticationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthenticationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Authentication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthenticationMutation) ResetField(name string) error {
	switch name {
	case authentication.FieldPersonID:
		m.ResetPersonID()
		return nil
	case authentication.FieldToken:
		m.ResetToken()
		return nil
	case authentication.FieldCreatedIP:
		m.ResetCreatedIP()
		return nil
	case authentication.FieldLastUsedIP:
		m.ResetLastUsedIP()
		return nil
	case authentication.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case authentication.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	}
	return fmt.Errorf("unknown Authentication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthenticationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.person != nil {
		edges = append(edges, authentication.EdgePerson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthenticationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authentication.EdgePerson:
		if id := m.person; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthenticationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthenticationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthenticationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedperson {
		edges = append(edges, authentication.EdgePerson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthenticationMutation) EdgeCleared(name string) bool {
	switch name {
	case authentication.EdgePerson:
		return m.clearedperson
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthenticationMutation) ClearEdge(name string) error {
	switch name {
	case authentication.EdgePerson:
		m.ClearPerson()
		return nil
	}
	return fmt.Errorf("unknown Authentication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthenticationMutation) ResetEdge(name string) error {
	switch name {
	case authentication.EdgePerson:
		m.ResetPerson()
		return nil
	}
	return fmt.Errorf("unknown Authentication edge %s", name)
}

// AuthorizationMutation represents an operation that mutates the Authorization nodes in the graph.
type AuthorizationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	token         *[]byte
	kind          *authorization.Kind
	created_at    *time.Time
	clearedFields map[string]struct{}
	person        *uuid.UUID
	clearedperson bool
	done          bool
	oldValue      func(context.Context) (*Authorization, error)
	predicates    []predicate.Authorization
}

var _ ent.Mutation = (*AuthorizationMutation)(nil)

// authorizationOption allows management of the mutation configuration using functional options.
type authorizationOption func(*AuthorizationMutation)

// newAuthorizationMutation creates new mutation for the Authorization entity.
func newAuthorizationMutation(c config, op Op, opts ...authorizationOption) *AuthorizationMutation {
	m := &AuthorizationMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthorization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorizationID sets the ID field of the mutation.
func withAuthorizationID(id uuid.UUID) authorizationOption {
	return func(m *AuthorizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Authorization
		)
		m.oldValue = func(ctx context.Context) (*Authorization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Authorization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthorization sets the old Authorization of the mutation.
func withAuthorization(node *Authorization) authorizationOption {
	return func(m *AuthorizationMutation) {
		m.oldValue = func(context.Context) (*Authorization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("data: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Authorization entities.
func (m *AuthorizationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthorizationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthorizationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Authorization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPersonID sets the "person_id" field.
func (m *AuthorizationMutation) SetPersonID(u uuid.UUID) {
	m.person = &u
}

// PersonID returns the value of the "person_id" field in the mutation.
func (m *AuthorizationMutation) PersonID() (r uuid.UUID, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonID returns the old "person_id" field's value of the Authorization entity.
// If the Authorization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizationMutation) OldPersonID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPersonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPersonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonID: %w", err)
	}
	return oldValue.PersonID, nil
}

// ResetPersonID resets all changes to the "person_id" field.
func (m *AuthorizationMutation) ResetPersonID() {
	m.person = nil
}

// SetToken sets the "token" field.
func (m *AuthorizationMutation) SetToken(b []byte) {
	m.token = &b
}

// Token returns the value of the "token" field in the mutation.
func (m *AuthorizationMutation) Token() (r []byte, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Authorization entity.
// If the Authorization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizationMutation) OldToken(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *AuthorizationMutation) ResetToken() {
	m.token = nil
}

// SetKind sets the "kind" field.
func (m *AuthorizationMutation) SetKind(a authorization.Kind) {
	m.kind = &a
}

// Kind returns the value of the "kind" field in the mutation.
func (m *AuthorizationMutation) Kind() (r authorization.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Authorization entity.
// If the Authorization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizationMutation) OldKind(ctx context.Context) (v authorization.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *AuthorizationMutation) ResetKind() {
	m.kind = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthorizationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthorizationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Authorization entity.
// If the Authorization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthorizationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearPerson clears the "person" edge to the Person entity.
func (m *AuthorizationMutation) ClearPerson() {
	m.clearedperson = true
	m.clearedFields[authorization.FieldPersonID] = struct{}{}
}

// PersonCleared reports if the "person" edge to the Person entity was cleared.
func (m *AuthorizationMutation) PersonCleared() bool {
	return m.clearedperson
}

// PersonIDs returns the "person" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonID instead. It exists only for internal usage by the builders.
func (m *AuthorizationMutation) PersonIDs() (ids []uuid.UUID) {
	if id := m.person; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPerson resets all changes to the "person" edge.
func (m *AuthorizationMutation) ResetPerson() {
	m.person = nil
	m.clearedperson = false
}

// Where appends a list predicates to the AuthorizationMutation builder.
func (m *AuthorizationMutation) Where(ps ...predicate.Authorization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthorizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthorizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Authorization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthorizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthorizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Authorization).
func (m *AuthorizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthorizationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.person != nil {
		fields = append(fields, authorization.FieldPersonID)
	}
	if m.token != nil {
		fields = append(fields, authorization.FieldToken)
	}
	if m.kind != nil {
		fields = append(fields, authorization.FieldKind)
	}
	if m.created_at != nil {
		fields = append(fields, authorization.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthorizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authorization.FieldPersonID:
		return m.PersonID()
	case authorization.FieldToken:
		return m.Token()
	case authorization.FieldKind:
		return m.Kind()
	case authorization.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthorizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authorization.FieldPersonID:
		return m.OldPersonID(ctx)
	case authorization.FieldToken:
		return m.OldToken(ctx)
	case authorization.FieldKind:
		return m.OldKind(ctx)
	case authorization.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Authorization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authorization.FieldPersonID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonID(v)
		return nil
	case authorization.FieldToken:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case authorization.FieldKind:
		v, ok := value.(authorization.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case authorization.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Authorization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthorizationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthorizationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Authorization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthorizationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthorizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorizationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Authorization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthorizationMutation) ResetField(name string) error {
	switch name {
	case authorization.FieldPersonID:
		m.ResetPersonID()
		return nil
	case authorization.FieldToken:
		m.ResetToken()
		return nil
	case authorization.FieldKind:
		m.ResetKind()
		return nil
	case authorization.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Authorization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthorizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.person != nil {
		edges = append(edges, authorization.EdgePerson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthorizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authorization.EdgePerson:
		if id := m.person; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthorizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthorizationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthorizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedperson {
		edges = append(edges, authorization.EdgePerson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthorizationMutation) EdgeCleared(name string) bool {
	switch name {
	case authorization.EdgePerson:
		return m.clearedperson
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthorizationMutation) ClearEdge(name string) error {
	switch name {
	case authorization.EdgePerson:
		m.ClearPerson()
		return nil
	}
	return fmt.Errorf("unknown Authorization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthorizationMutation) ResetEdge(name string) error {
	switch name {
	case authorization.EdgePerson:
		m.ResetPerson()
		return nil
	}
	return fmt.Errorf("unknown Authorization edge %s", name)
}

// PersonMutation represents an operation that mutates the Person nodes in the graph.
type PersonMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	stripe_id              *string
	email                  *string
	email_verified_at      *time.Time
	phone                  *string
	password               *string
	tax_id                 *string
	first_name             *string
	last_name              *string
	language               *string
	birthdate              *time.Time
	gender                 *person.Gender
	address                *string
	postal_code            *string
	city                   *string
	country                *string
	subscribed             *bool
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	authentications        map[uuid.UUID]struct{}
	removedauthentications map[uuid.UUID]struct{}
	clearedauthentications bool
	authorizations         map[uuid.UUID]struct{}
	removedauthorizations  map[uuid.UUID]struct{}
	clearedauthorizations  bool
	done                   bool
	oldValue               func(context.Context) (*Person, error)
	predicates             []predicate.Person
}

var _ ent.Mutation = (*PersonMutation)(nil)

// personOption allows management of the mutation configuration using functional options.
type personOption func(*PersonMutation)

// newPersonMutation creates new mutation for the Person entity.
func newPersonMutation(c config, op Op, opts ...personOption) *PersonMutation {
	m := &PersonMutation{
		config:        c,
		op:            op,
		typ:           TypePerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonID sets the ID field of the mutation.
func withPersonID(id uuid.UUID) personOption {
	return func(m *PersonMutation) {
		var (
			err   error
			once  sync.Once
			value *Person
		)
		m.oldValue = func(ctx context.Context) (*Person, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Person.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerson sets the old Person of the mutation.
func withPerson(node *Person) personOption {
	return func(m *PersonMutation) {
		m.oldValue = func(context.Context) (*Person, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("data: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Person entities.
func (m *PersonMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Person.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStripeID sets the "stripe_id" field.
func (m *PersonMutation) SetStripeID(s string) {
	m.stripe_id = &s
}

// StripeID returns the value of the "stripe_id" field in the mutation.
func (m *PersonMutation) StripeID() (r string, exists bool) {
	v := m.stripe_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStripeID returns the old "stripe_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldStripeID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStripeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStripeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStripeID: %w", err)
	}
	return oldValue.StripeID, nil
}

// ClearStripeID clears the value of the "stripe_id" field.
func (m *PersonMutation) ClearStripeID() {
	m.stripe_id = nil
	m.clearedFields[person.FieldStripeID] = struct{}{}
}

// StripeIDCleared returns if the "stripe_id" field was cleared in this mutation.
func (m *PersonMutation) StripeIDCleared() bool {
	_, ok := m.clearedFields[person.FieldStripeID]
	return ok
}

// ResetStripeID resets all changes to the "stripe_id" field.
func (m *PersonMutation) ResetStripeID() {
	m.stripe_id = nil
	delete(m.clearedFields, person.FieldStripeID)
}

// SetEmail sets the "email" field.
func (m *PersonMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PersonMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *PersonMutation) ResetEmail() {
	m.email = nil
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (m *PersonMutation) SetEmailVerifiedAt(t time.Time) {
	m.email_verified_at = &t
}

// EmailVerifiedAt returns the value of the "email_verified_at" field in the mutation.
func (m *PersonMutation) EmailVerifiedAt() (r time.Time, exists bool) {
	v := m.email_verified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerifiedAt returns the old "email_verified_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldEmailVerifiedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerifiedAt: %w", err)
	}
	return oldValue.EmailVerifiedAt, nil
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (m *PersonMutation) ClearEmailVerifiedAt() {
	m.email_verified_at = nil
	m.clearedFields[person.FieldEmailVerifiedAt] = struct{}{}
}

// EmailVerifiedAtCleared returns if the "email_verified_at" field was cleared in this mutation.
func (m *PersonMutation) EmailVerifiedAtCleared() bool {
	_, ok := m.clearedFields[person.FieldEmailVerifiedAt]
	return ok
}

// ResetEmailVerifiedAt resets all changes to the "email_verified_at" field.
func (m *PersonMutation) ResetEmailVerifiedAt() {
	m.email_verified_at = nil
	delete(m.clearedFields, person.FieldEmailVerifiedAt)
}

// SetPhone sets the "phone" field.
func (m *PersonMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *PersonMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPhone(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *PersonMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[person.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *PersonMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[person.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *PersonMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, person.FieldPhone)
}

// SetPassword sets the "password" field.
func (m *PersonMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *PersonMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *PersonMutation) ResetPassword() {
	m.password = nil
}

// SetTaxID sets the "tax_id" field.
func (m *PersonMutation) SetTaxID(s string) {
	m.tax_id = &s
}

// TaxID returns the value of the "tax_id" field in the mutation.
func (m *PersonMutation) TaxID() (r string, exists bool) {
	v := m.tax_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxID returns the old "tax_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldTaxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxID: %w", err)
	}
	return oldValue.TaxID, nil
}

// ResetTaxID resets all changes to the "tax_id" field.
func (m *PersonMutation) ResetTaxID() {
	m.tax_id = nil
}

// SetFirstName sets the "first_name" field.
func (m *PersonMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *PersonMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *PersonMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *PersonMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *PersonMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *PersonMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[person.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *PersonMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[person.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *PersonMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, person.FieldLastName)
}

// SetLanguage sets the "language" field.
func (m *PersonMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *PersonMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *PersonMutation) ResetLanguage() {
	m.language = nil
}

// SetBirthdate sets the "birthdate" field.
func (m *PersonMutation) SetBirthdate(t time.Time) {
	m.birthdate = &t
}

// Birthdate returns the value of the "birthdate" field in the mutation.
func (m *PersonMutation) Birthdate() (r time.Time, exists bool) {
	v := m.birthdate
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthdate returns the old "birthdate" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldBirthdate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthdate: %w", err)
	}
	return oldValue.Birthdate, nil
}

// ClearBirthdate clears the value of the "birthdate" field.
func (m *PersonMutation) ClearBirthdate() {
	m.birthdate = nil
	m.clearedFields[person.FieldBirthdate] = struct{}{}
}

// BirthdateCleared returns if the "birthdate" field was cleared in this mutation.
func (m *PersonMutation) BirthdateCleared() bool {
	_, ok := m.clearedFields[person.FieldBirthdate]
	return ok
}

// ResetBirthdate resets all changes to the "birthdate" field.
func (m *PersonMutation) ResetBirthdate() {
	m.birthdate = nil
	delete(m.clearedFields, person.FieldBirthdate)
}

// SetGender sets the "gender" field.
func (m *PersonMutation) SetGender(pe person.Gender) {
	m.gender = &pe
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PersonMutation) Gender() (r person.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldGender(ctx context.Context) (v *person.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *PersonMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[person.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *PersonMutation) GenderCleared() bool {
	_, ok := m.clearedFields[person.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *PersonMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, person.FieldGender)
}

// SetAddress sets the "address" field.
func (m *PersonMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *PersonMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *PersonMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[person.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *PersonMutation) AddressCleared() bool {
	_, ok := m.clearedFields[person.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *PersonMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, person.FieldAddress)
}

// SetPostalCode sets the "postal_code" field.
func (m *PersonMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *PersonMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPostalCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ClearPostalCode clears the value of the "postal_code" field.
func (m *PersonMutation) ClearPostalCode() {
	m.postal_code = nil
	m.clearedFields[person.FieldPostalCode] = struct{}{}
}

// PostalCodeCleared returns if the "postal_code" field was cleared in this mutation.
func (m *PersonMutation) PostalCodeCleared() bool {
	_, ok := m.clearedFields[person.FieldPostalCode]
	return ok
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *PersonMutation) ResetPostalCode() {
	m.postal_code = nil
	delete(m.clearedFields, person.FieldPostalCode)
}

// SetCity sets the "city" field.
func (m *PersonMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *PersonMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCity(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ClearCity clears the value of the "city" field.
func (m *PersonMutation) ClearCity() {
	m.city = nil
	m.clearedFields[person.FieldCity] = struct{}{}
}

// CityCleared returns if the "city" field was cleared in this mutation.
func (m *PersonMutation) CityCleared() bool {
	_, ok := m.clearedFields[person.FieldCity]
	return ok
}

// ResetCity resets all changes to the "city" field.
func (m *PersonMutation) ResetCity() {
	m.city = nil
	delete(m.clearedFields, person.FieldCity)
}

// SetCountry sets the "country" field.
func (m *PersonMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *PersonMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCountry(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *PersonMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[person.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *PersonMutation) CountryCleared() bool {
	_, ok := m.clearedFields[person.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *PersonMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, person.FieldCountry)
}

// SetSubscribed sets the "subscribed" field.
func (m *PersonMutation) SetSubscribed(b bool) {
	m.subscribed = &b
}

// Subscribed returns the value of the "subscribed" field in the mutation.
func (m *PersonMutation) Subscribed() (r bool, exists bool) {
	v := m.subscribed
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribed returns the old "subscribed" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldSubscribed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribed: %w", err)
	}
	return oldValue.Subscribed, nil
}

// ResetSubscribed resets all changes to the "subscribed" field.
func (m *PersonMutation) ResetSubscribed() {
	m.subscribed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PersonMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PersonMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PersonMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PersonMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PersonMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PersonMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddAuthenticationIDs adds the "authentications" edge to the Authentication entity by ids.
func (m *PersonMutation) AddAuthenticationIDs(ids ...uuid.UUID) {
	if m.authentications == nil {
		m.authentications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.authentications[ids[i]] = struct{}{}
	}
}

// ClearAuthentications clears the "authentications" edge to the Authentication entity.
func (m *PersonMutation) ClearAuthentications() {
	m.clearedauthentications = true
}

// AuthenticationsCleared reports if the "authentications" edge to the Authentication entity was cleared.
func (m *PersonMutation) AuthenticationsCleared() bool {
	return m.clearedauthentications
}

// RemoveAuthenticationIDs removes the "authentications" edge to the Authentication entity by IDs.
func (m *PersonMutation) RemoveAuthenticationIDs(ids ...uuid.UUID) {
	if m.removedauthentications == nil {
		m.removedauthentications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.authentications, ids[i])
		m.removedauthentications[ids[i]] = struct{}{}
	}
}

// RemovedAuthentications returns the removed IDs of the "authentications" edge to the Authentication entity.
func (m *PersonMutation) RemovedAuthenticationsIDs() (ids []uuid.UUID) {
	for id := range m.removedauthentications {
		ids = append(ids, id)
	}
	return
}

// AuthenticationsIDs returns the "authentications" edge IDs in the mutation.
func (m *PersonMutation) AuthenticationsIDs() (ids []uuid.UUID) {
	for id := range m.authentications {
		ids = append(ids, id)
	}
	return
}

// ResetAuthentications resets all changes to the "authentications" edge.
func (m *PersonMutation) ResetAuthentications() {
	m.authentications = nil
	m.clearedauthentications = false
	m.removedauthentications = nil
}

// AddAuthorizationIDs adds the "authorizations" edge to the Authorization entity by ids.
func (m *PersonMutation) AddAuthorizationIDs(ids ...uuid.UUID) {
	if m.authorizations == nil {
		m.authorizations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.authorizations[ids[i]] = struct{}{}
	}
}

// ClearAuthorizations clears the "authorizations" edge to the Authorization entity.
func (m *PersonMutation) ClearAuthorizations() {
	m.clearedauthorizations = true
}

// AuthorizationsCleared reports if the "authorizations" edge to the Authorization entity was cleared.
func (m *PersonMutation) AuthorizationsCleared() bool {
	return m.clearedauthorizations
}

// RemoveAuthorizationIDs removes the "authorizations" edge to the Authorization entity by IDs.
func (m *PersonMutation) RemoveAuthorizationIDs(ids ...uuid.UUID) {
	if m.removedauthorizations == nil {
		m.removedauthorizations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.authorizations, ids[i])
		m.removedauthorizations[ids[i]] = struct{}{}
	}
}

// RemovedAuthorizations returns the removed IDs of the "authorizations" edge to the Authorization entity.
func (m *PersonMutation) RemovedAuthorizationsIDs() (ids []uuid.UUID) {
	for id := range m.removedauthorizations {
		ids = append(ids, id)
	}
	return
}

// AuthorizationsIDs returns the "authorizations" edge IDs in the mutation.
func (m *PersonMutation) AuthorizationsIDs() (ids []uuid.UUID) {
	for id := range m.authorizations {
		ids = append(ids, id)
	}
	return
}

// ResetAuthorizations resets all changes to the "authorizations" edge.
func (m *PersonMutation) ResetAuthorizations() {
	m.authorizations = nil
	m.clearedauthorizations = false
	m.removedauthorizations = nil
}

// Where appends a list predicates to the PersonMutation builder.
func (m *PersonMutation) Where(ps ...predicate.Person) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Person, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Person).
func (m *PersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.stripe_id != nil {
		fields = append(fields, person.FieldStripeID)
	}
	if m.email != nil {
		fields = append(fields, person.FieldEmail)
	}
	if m.email_verified_at != nil {
		fields = append(fields, person.FieldEmailVerifiedAt)
	}
	if m.phone != nil {
		fields = append(fields, person.FieldPhone)
	}
	if m.password != nil {
		fields = append(fields, person.FieldPassword)
	}
	if m.tax_id != nil {
		fields = append(fields, person.FieldTaxID)
	}
	if m.first_name != nil {
		fields = append(fields, person.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, person.FieldLastName)
	}
	if m.language != nil {
		fields = append(fields, person.FieldLanguage)
	}
	if m.birthdate != nil {
		fields = append(fields, person.FieldBirthdate)
	}
	if m.gender != nil {
		fields = append(fields, person.FieldGender)
	}
	if m.address != nil {
		fields = append(fields, person.FieldAddress)
	}
	if m.postal_code != nil {
		fields = append(fields, person.FieldPostalCode)
	}
	if m.city != nil {
		fields = append(fields, person.FieldCity)
	}
	if m.country != nil {
		fields = append(fields, person.FieldCountry)
	}
	if m.subscribed != nil {
		fields = append(fields, person.FieldSubscribed)
	}
	if m.created_at != nil {
		fields = append(fields, person.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, person.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case person.FieldStripeID:
		return m.StripeID()
	case person.FieldEmail:
		return m.Email()
	case person.FieldEmailVerifiedAt:
		return m.EmailVerifiedAt()
	case person.FieldPhone:
		return m.Phone()
	case person.FieldPassword:
		return m.Password()
	case person.FieldTaxID:
		return m.TaxID()
	case person.FieldFirstName:
		return m.FirstName()
	case person.FieldLastName:
		return m.LastName()
	case person.FieldLanguage:
		return m.Language()
	case person.FieldBirthdate:
		return m.Birthdate()
	case person.FieldGender:
		return m.Gender()
	case person.FieldAddress:
		return m.Address()
	case person.FieldPostalCode:
		return m.PostalCode()
	case person.FieldCity:
		return m.City()
	case person.FieldCountry:
		return m.Country()
	case person.FieldSubscribed:
		return m.Subscribed()
	case person.FieldCreatedAt:
		return m.CreatedAt()
	case person.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case person.FieldStripeID:
		return m.OldStripeID(ctx)
	case person.FieldEmail:
		return m.OldEmail(ctx)
	case person.FieldEmailVerifiedAt:
		return m.OldEmailVerifiedAt(ctx)
	case person.FieldPhone:
		return m.OldPhone(ctx)
	case person.FieldPassword:
		return m.OldPassword(ctx)
	case person.FieldTaxID:
		return m.OldTaxID(ctx)
	case person.FieldFirstName:
		return m.OldFirstName(ctx)
	case person.FieldLastName:
		return m.OldLastName(ctx)
	case person.FieldLanguage:
		return m.OldLanguage(ctx)
	case person.FieldBirthdate:
		return m.OldBirthdate(ctx)
	case person.FieldGender:
		return m.OldGender(ctx)
	case person.FieldAddress:
		return m.OldAddress(ctx)
	case person.FieldPostalCode:
		return m.OldPostalCode(ctx)
	case person.FieldCity:
		return m.OldCity(ctx)
	case person.FieldCountry:
		return m.OldCountry(ctx)
	case person.FieldSubscribed:
		return m.OldSubscribed(ctx)
	case person.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case person.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Person field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case person.FieldStripeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStripeID(v)
		return nil
	case person.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case person.FieldEmailVerifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerifiedAt(v)
		return nil
	case person.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case person.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case person.FieldTaxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxID(v)
		return nil
	case person.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case person.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case person.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case person.FieldBirthdate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthdate(v)
		return nil
	case person.FieldGender:
		v, ok := value.(person.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case person.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case person.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	case person.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case person.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case person.FieldSubscribed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribed(v)
		return nil
	case person.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case person.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Person numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(person.FieldStripeID) {
		fields = append(fields, person.FieldStripeID)
	}
	if m.FieldCleared(person.FieldEmailVerifiedAt) {
		fields = append(fields, person.FieldEmailVerifiedAt)
	}
	if m.FieldCleared(person.FieldPhone) {
		fields = append(fields, person.FieldPhone)
	}
	if m.FieldCleared(person.FieldLastName) {
		fields = append(fields, person.FieldLastName)
	}
	if m.FieldCleared(person.FieldBirthdate) {
		fields = append(fields, person.FieldBirthdate)
	}
	if m.FieldCleared(person.FieldGender) {
		fields = append(fields, person.FieldGender)
	}
	if m.FieldCleared(person.FieldAddress) {
		fields = append(fields, person.FieldAddress)
	}
	if m.FieldCleared(person.FieldPostalCode) {
		fields = append(fields, person.FieldPostalCode)
	}
	if m.FieldCleared(person.FieldCity) {
		fields = append(fields, person.FieldCity)
	}
	if m.FieldCleared(person.FieldCountry) {
		fields = append(fields, person.FieldCountry)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonMutation) ClearField(name string) error {
	switch name {
	case person.FieldStripeID:
		m.ClearStripeID()
		return nil
	case person.FieldEmailVerifiedAt:
		m.ClearEmailVerifiedAt()
		return nil
	case person.FieldPhone:
		m.ClearPhone()
		return nil
	case person.FieldLastName:
		m.ClearLastName()
		return nil
	case person.FieldBirthdate:
		m.ClearBirthdate()
		return nil
	case person.FieldGender:
		m.ClearGender()
		return nil
	case person.FieldAddress:
		m.ClearAddress()
		return nil
	case person.FieldPostalCode:
		m.ClearPostalCode()
		return nil
	case person.FieldCity:
		m.ClearCity()
		return nil
	case person.FieldCountry:
		m.ClearCountry()
		return nil
	}
	return fmt.Errorf("unknown Person nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonMutation) ResetField(name string) error {
	switch name {
	case person.FieldStripeID:
		m.ResetStripeID()
		return nil
	case person.FieldEmail:
		m.ResetEmail()
		return nil
	case person.FieldEmailVerifiedAt:
		m.ResetEmailVerifiedAt()
		return nil
	case person.FieldPhone:
		m.ResetPhone()
		return nil
	case person.FieldPassword:
		m.ResetPassword()
		return nil
	case person.FieldTaxID:
		m.ResetTaxID()
		return nil
	case person.FieldFirstName:
		m.ResetFirstName()
		return nil
	case person.FieldLastName:
		m.ResetLastName()
		return nil
	case person.FieldLanguage:
		m.ResetLanguage()
		return nil
	case person.FieldBirthdate:
		m.ResetBirthdate()
		return nil
	case person.FieldGender:
		m.ResetGender()
		return nil
	case person.FieldAddress:
		m.ResetAddress()
		return nil
	case person.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	case person.FieldCity:
		m.ResetCity()
		return nil
	case person.FieldCountry:
		m.ResetCountry()
		return nil
	case person.FieldSubscribed:
		m.ResetSubscribed()
		return nil
	case person.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case person.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.authentications != nil {
		edges = append(edges, person.EdgeAuthentications)
	}
	if m.authorizations != nil {
		edges = append(edges, person.EdgeAuthorizations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeAuthentications:
		ids := make([]ent.Value, 0, len(m.authentications))
		for id := range m.authentications {
			ids = append(ids, id)
		}
		return ids
	case person.EdgeAuthorizations:
		ids := make([]ent.Value, 0, len(m.authorizations))
		for id := range m.authorizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedauthentications != nil {
		edges = append(edges, person.EdgeAuthentications)
	}
	if m.removedauthorizations != nil {
		edges = append(edges, person.EdgeAuthorizations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeAuthentications:
		ids := make([]ent.Value, 0, len(m.removedauthentications))
		for id := range m.removedauthentications {
			ids = append(ids, id)
		}
		return ids
	case person.EdgeAuthorizations:
		ids := make([]ent.Value, 0, len(m.removedauthorizations))
		for id := range m.removedauthorizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthentications {
		edges = append(edges, person.EdgeAuthentications)
	}
	if m.clearedauthorizations {
		edges = append(edges, person.EdgeAuthorizations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonMutation) EdgeCleared(name string) bool {
	switch name {
	case person.EdgeAuthentications:
		return m.clearedauthentications
	case person.EdgeAuthorizations:
		return m.clearedauthorizations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Person unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonMutation) ResetEdge(name string) error {
	switch name {
	case person.EdgeAuthentications:
		m.ResetAuthentications()
		return nil
	case person.EdgeAuthorizations:
		m.ResetAuthorizations()
		return nil
	}
	return fmt.Errorf("unknown Person edge %s", name)
}
