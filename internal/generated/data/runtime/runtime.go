// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/avptp/brain/internal/data/schema"
	"github.com/avptp/brain/internal/generated/data/authentication"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/person"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authentication.Policy = privacy.NewPolicies(schema.Authentication{})
	authentication.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := authentication.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	authenticationHooks := schema.Authentication{}.Hooks()

	authentication.Hooks[1] = authenticationHooks[0]
	authenticationFields := schema.Authentication{}.Fields()
	_ = authenticationFields
	// authenticationDescCreatedAt is the schema descriptor for created_at field.
	authenticationDescCreatedAt := authenticationFields[5].Descriptor()
	// authentication.DefaultCreatedAt holds the default value on creation for the created_at field.
	authentication.DefaultCreatedAt = authenticationDescCreatedAt.Default.(func() time.Time)
	// authenticationDescLastUsedAt is the schema descriptor for last_used_at field.
	authenticationDescLastUsedAt := authenticationFields[6].Descriptor()
	// authentication.DefaultLastUsedAt holds the default value on creation for the last_used_at field.
	authentication.DefaultLastUsedAt = authenticationDescLastUsedAt.Default.(func() time.Time)
	// authentication.UpdateDefaultLastUsedAt holds the default value on update for the last_used_at field.
	authentication.UpdateDefaultLastUsedAt = authenticationDescLastUsedAt.UpdateDefault.(func() time.Time)
	authorization.Policy = privacy.NewPolicies(schema.Authorization{})
	authorization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := authorization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	authorizationHooks := schema.Authorization{}.Hooks()

	authorization.Hooks[1] = authorizationHooks[0]
	authorizationFields := schema.Authorization{}.Fields()
	_ = authorizationFields
	// authorizationDescCreatedAt is the schema descriptor for created_at field.
	authorizationDescCreatedAt := authorizationFields[4].Descriptor()
	// authorization.DefaultCreatedAt holds the default value on creation for the created_at field.
	authorization.DefaultCreatedAt = authorizationDescCreatedAt.Default.(func() time.Time)
	person.Policy = privacy.NewPolicies(schema.Person{})
	person.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := person.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	personHooks := schema.Person{}.Hooks()

	person.Hooks[1] = personHooks[0]

	person.Hooks[2] = personHooks[1]

	person.Hooks[3] = personHooks[2]

	person.Hooks[4] = personHooks[3]
	personFields := schema.Person{}.Fields()
	_ = personFields
	// personDescEmail is the schema descriptor for email field.
	personDescEmail := personFields[1].Descriptor()
	// person.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	person.EmailValidator = func() func(string) error {
		validators := personDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescPhone is the schema descriptor for phone field.
	personDescPhone := personFields[3].Descriptor()
	// person.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	person.PhoneValidator = func() func(string) error {
		validators := personDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescTaxID is the schema descriptor for tax_id field.
	personDescTaxID := personFields[5].Descriptor()
	// person.TaxIDValidator is a validator for the "tax_id" field. It is called by the builders before save.
	person.TaxIDValidator = func() func(string) error {
		validators := personDescTaxID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tax_id string) error {
			for _, fn := range fns {
				if err := fn(tax_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescFirstName is the schema descriptor for first_name field.
	personDescFirstName := personFields[6].Descriptor()
	// person.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	person.FirstNameValidator = func() func(string) error {
		validators := personDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescLastName is the schema descriptor for last_name field.
	personDescLastName := personFields[7].Descriptor()
	// person.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	person.LastNameValidator = func() func(string) error {
		validators := personDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescAddress is the schema descriptor for address field.
	personDescAddress := personFields[11].Descriptor()
	// person.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	person.AddressValidator = func() func(string) error {
		validators := personDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescPostalCode is the schema descriptor for postal_code field.
	personDescPostalCode := personFields[12].Descriptor()
	// person.PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	person.PostalCodeValidator = func() func(string) error {
		validators := personDescPostalCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(postal_code string) error {
			for _, fn := range fns {
				if err := fn(postal_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescCity is the schema descriptor for city field.
	personDescCity := personFields[13].Descriptor()
	// person.CityValidator is a validator for the "city" field. It is called by the builders before save.
	person.CityValidator = func() func(string) error {
		validators := personDescCity.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(city string) error {
			for _, fn := range fns {
				if err := fn(city); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personDescCountry is the schema descriptor for country field.
	personDescCountry := personFields[14].Descriptor()
	// person.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	person.CountryValidator = personDescCountry.Validators[0].(func(string) error)
	// personDescCreatedAt is the schema descriptor for created_at field.
	personDescCreatedAt := personFields[15].Descriptor()
	// person.DefaultCreatedAt holds the default value on creation for the created_at field.
	person.DefaultCreatedAt = personDescCreatedAt.Default.(func() time.Time)
	// personDescUpdatedAt is the schema descriptor for updated_at field.
	personDescUpdatedAt := personFields[16].Descriptor()
	// person.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	person.DefaultUpdatedAt = personDescUpdatedAt.Default.(func() time.Time)
	// person.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	person.UpdateDefaultUpdatedAt = personDescUpdatedAt.UpdateDefault.(func() time.Time)
}

const (
	Version = "v0.12.4"                                         // Version of ent codegen.
	Sum     = "h1:LddPnAyxls/O7DTXZvUGDj0NZIdGSu317+aoNLJWbD8=" // Sum of ent codegen.
)
