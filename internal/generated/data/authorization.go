// Code generated by ent, DO NOT EDIT.

package data

import (
	"encoding/base64"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/person"
	"github.com/google/uuid"
)

// Authorization is the model entity for the Authorization schema.
type Authorization struct {
	config `fake:"-" fakesize:"-" json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PersonID holds the value of the "person_id" field.
	PersonID uuid.UUID `json:"person_id,omitempty"`
	// Token holds the value of the "token" field.
	Token []byte `json:"token,omitempty" fakesize:"64"`
	// Kind holds the value of the "kind" field.
	Kind authorization.Kind `json:"kind,omitempty" fake:"{randomstring:[email,password]}"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorizationQuery when eager-loading is set.
	Edges        AuthorizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthorizationEdges holds the relations/edges for other nodes in the graph.
type AuthorizationEdges struct {
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthorizationEdges) PersonOrErr() (*Person, error) {
	if e.Person != nil {
		return e.Person, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: person.Label}
	}
	return nil, &NotLoadedError{edge: "person"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authorization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authorization.FieldToken:
			values[i] = new([]byte)
		case authorization.FieldKind:
			values[i] = new(sql.NullString)
		case authorization.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case authorization.FieldID, authorization.FieldPersonID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authorization fields.
func (a *Authorization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authorization.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case authorization.FieldPersonID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field person_id", values[i])
			} else if value != nil {
				a.PersonID = *value
			}
		case authorization.FieldToken:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value != nil {
				a.Token = *value
			}
		case authorization.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				a.Kind = authorization.Kind(value.String)
			}
		case authorization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Authorization.
// This includes values selected through modifiers, order, etc.
func (a *Authorization) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryPerson queries the "person" edge of the Authorization entity.
func (a *Authorization) QueryPerson() *PersonQuery {
	return NewAuthorizationClient(a.config).QueryPerson(a)
}

// Update returns a builder for updating this Authorization.
// Note that you need to call Authorization.Unwrap() before calling this method if this Authorization
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authorization) Update() *AuthorizationUpdateOne {
	return NewAuthorizationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authorization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authorization) Unwrap() *Authorization {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("data: Authorization is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authorization) String() string {
	var builder strings.Builder
	builder.WriteString("Authorization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("person_id=")
	builder.WriteString(fmt.Sprintf("%v", a.PersonID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(fmt.Sprintf("%v", a.Token))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", a.Kind))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

func (a *Authorization) TokenEncoded() string {
	return base64.URLEncoding.EncodeToString(a.Token)
}

// Authorizations is a parsable slice of Authorization.
type Authorizations []*Authorization
