// Code generated by ent, DO NOT EDIT.

package authentication

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the authentication type in the database.
	Label = "authentication"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldCreatedIP holds the string denoting the created_ip field in the database.
	FieldCreatedIP = "created_ip"
	// FieldLastUsedIP holds the string denoting the last_used_ip field in the database.
	FieldLastUsedIP = "last_used_ip"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// Table holds the table name of the authentication in the database.
	Table = "authentications"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "authentications"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_id"
)

// Columns holds all SQL columns for authentication fields.
var Columns = []string{
	FieldID,
	FieldPersonID,
	FieldToken,
	FieldCreatedIP,
	FieldLastUsedIP,
	FieldCreatedAt,
	FieldLastUsedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/avptp/brain/internal/generated/data/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastUsedAt holds the default value on creation for the "last_used_at" field.
	DefaultLastUsedAt func() time.Time
	// UpdateDefaultLastUsedAt holds the default value on update for the "last_used_at" field.
	UpdateDefaultLastUsedAt func() time.Time
)

// OrderOption defines the ordering options for the Authentication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPersonID orders the results by the person_id field.
func ByPersonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonID, opts...).ToFunc()
}

// ByCreatedIP orders the results by the created_ip field.
func ByCreatedIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedIP, opts...).ToFunc()
}

// ByLastUsedIP orders the results by the last_used_ip field.
func ByLastUsedIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedIP, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByPersonField orders the results by person field.
func ByPersonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonStep(), sql.OrderByField(field, opts...))
	}
}
func newPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
	)
}
