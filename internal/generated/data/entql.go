// Code generated by ent, DO NOT EDIT.

package data

import (
	"github.com/avptp/brain/internal/generated/data/authentication"
	"github.com/avptp/brain/internal/generated/data/person"
	"github.com/avptp/brain/internal/generated/data/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   authentication.Table,
			Columns: authentication.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authentication.FieldID,
			},
		},
		Type: "Authentication",
		Fields: map[string]*sqlgraph.FieldSpec{
			authentication.FieldPersonID:   {Type: field.TypeUUID, Column: authentication.FieldPersonID},
			authentication.FieldToken:      {Type: field.TypeBytes, Column: authentication.FieldToken},
			authentication.FieldCreatedIP:  {Type: field.TypeString, Column: authentication.FieldCreatedIP},
			authentication.FieldLastUsedIP: {Type: field.TypeString, Column: authentication.FieldLastUsedIP},
			authentication.FieldCreatedAt:  {Type: field.TypeTime, Column: authentication.FieldCreatedAt},
			authentication.FieldLastUsedAt: {Type: field.TypeTime, Column: authentication.FieldLastUsedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldEmail:           {Type: field.TypeString, Column: person.FieldEmail},
			person.FieldEmailVerifiedAt: {Type: field.TypeTime, Column: person.FieldEmailVerifiedAt},
			person.FieldPhone:           {Type: field.TypeString, Column: person.FieldPhone},
			person.FieldPassword:        {Type: field.TypeString, Column: person.FieldPassword},
			person.FieldTaxID:           {Type: field.TypeString, Column: person.FieldTaxID},
			person.FieldFirstName:       {Type: field.TypeString, Column: person.FieldFirstName},
			person.FieldLastName:        {Type: field.TypeString, Column: person.FieldLastName},
			person.FieldLanguage:        {Type: field.TypeString, Column: person.FieldLanguage},
			person.FieldBirthdate:       {Type: field.TypeTime, Column: person.FieldBirthdate},
			person.FieldGender:          {Type: field.TypeEnum, Column: person.FieldGender},
			person.FieldAddress:         {Type: field.TypeString, Column: person.FieldAddress},
			person.FieldPostalCode:      {Type: field.TypeString, Column: person.FieldPostalCode},
			person.FieldCity:            {Type: field.TypeString, Column: person.FieldCity},
			person.FieldCountry:         {Type: field.TypeString, Column: person.FieldCountry},
			person.FieldCreatedAt:       {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:       {Type: field.TypeTime, Column: person.FieldUpdatedAt},
		},
	}
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authentication.PersonTable,
			Columns: []string{authentication.PersonColumn},
			Bidi:    false,
		},
		"Authentication",
		"Person",
	)
	graph.MustAddE(
		"authentications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AuthenticationsTable,
			Columns: []string{person.AuthenticationsColumn},
			Bidi:    false,
		},
		"Person",
		"Authentication",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthenticationQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthenticationQuery builder.
func (aq *AuthenticationQuery) Filter() *AuthenticationFilter {
	return &AuthenticationFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthenticationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthenticationMutation builder.
func (m *AuthenticationMutation) Filter() *AuthenticationFilter {
	return &AuthenticationFilter{config: m.config, predicateAdder: m}
}

// AuthenticationFilter provides a generic filtering capability at runtime for AuthenticationQuery.
type AuthenticationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthenticationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AuthenticationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(authentication.FieldID))
}

// WherePersonID applies the entql [16]byte predicate on the person_id field.
func (f *AuthenticationFilter) WherePersonID(p entql.ValueP) {
	f.Where(p.Field(authentication.FieldPersonID))
}

// WhereToken applies the entql []byte predicate on the token field.
func (f *AuthenticationFilter) WhereToken(p entql.BytesP) {
	f.Where(p.Field(authentication.FieldToken))
}

// WhereCreatedIP applies the entql string predicate on the created_ip field.
func (f *AuthenticationFilter) WhereCreatedIP(p entql.StringP) {
	f.Where(p.Field(authentication.FieldCreatedIP))
}

// WhereLastUsedIP applies the entql string predicate on the last_used_ip field.
func (f *AuthenticationFilter) WhereLastUsedIP(p entql.StringP) {
	f.Where(p.Field(authentication.FieldLastUsedIP))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AuthenticationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(authentication.FieldCreatedAt))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *AuthenticationFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(authentication.FieldLastUsedAt))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *AuthenticationFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *AuthenticationFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{config: m.config, predicateAdder: m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PersonFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(person.FieldID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *PersonFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(person.FieldEmail))
}

// WhereEmailVerifiedAt applies the entql time.Time predicate on the email_verified_at field.
func (f *PersonFilter) WhereEmailVerifiedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldEmailVerifiedAt))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *PersonFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(person.FieldPhone))
}

// WherePassword applies the entql string predicate on the password field.
func (f *PersonFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(person.FieldPassword))
}

// WhereTaxID applies the entql string predicate on the tax_id field.
func (f *PersonFilter) WhereTaxID(p entql.StringP) {
	f.Where(p.Field(person.FieldTaxID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *PersonFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(person.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *PersonFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(person.FieldLastName))
}

// WhereLanguage applies the entql string predicate on the language field.
func (f *PersonFilter) WhereLanguage(p entql.StringP) {
	f.Where(p.Field(person.FieldLanguage))
}

// WhereBirthdate applies the entql time.Time predicate on the birthdate field.
func (f *PersonFilter) WhereBirthdate(p entql.TimeP) {
	f.Where(p.Field(person.FieldBirthdate))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *PersonFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(person.FieldGender))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *PersonFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(person.FieldAddress))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *PersonFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(person.FieldPostalCode))
}

// WhereCity applies the entql string predicate on the city field.
func (f *PersonFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(person.FieldCity))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *PersonFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(person.FieldCountry))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereHasAuthentications applies a predicate to check if query has an edge authentications.
func (f *PersonFilter) WhereHasAuthentications() {
	f.Where(entql.HasEdge("authentications"))
}

// WhereHasAuthenticationsWith applies a predicate to check if query has an edge authentications with a given conditions (other predicates).
func (f *PersonFilter) WhereHasAuthenticationsWith(preds ...predicate.Authentication) {
	f.Where(entql.HasEdgeWith("authentications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
