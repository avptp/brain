// Code generated by ent, DO NOT EDIT.

package factories

import (
	"context"
	"time"

	"github.com/avptp/brain/internal/api/types"
	"github.com/avptp/brain/internal/generated/data"
	"github.com/avptp/brain/internal/generated/data/authorization"
	"github.com/avptp/brain/internal/generated/data/person"

	"github.com/go-faker/faker/v4"
)

// Base factory
type Factory struct {
	data *data.Client
}

func New(data *data.Client) *Factory {
	return &Factory{
		data: data,
	}
}

// Authentication factory
type AuthenticationFactory struct {
	*Factory

	Fields  AuthenticationFields
	builder *data.AuthenticationCreate
}

type AuthenticationFields struct {
	PersonID                types.ID   `json:"person_id,omitempty"`
	Token                   []byte     `json:"token,omitempty" faker:"slice_len=64"`
	CreatedIP               string     `json:"created_ip,omitempty" faker:"ipv6"`
	LastUsedIP              string     `json:"last_used_ip,omitempty" faker:"ipv6"`
	CreatedAt               time.Time  `json:"created_at,omitempty"`
	LastUsedAt              time.Time  `json:"last_used_at,omitempty"`
	LastPasswordChallengeAt *time.Time `json:"last_password_challenge_at,omitempty" faker:"-"`
	LastCaptchaChallengeAt  *time.Time `json:"last_captcha_challenge_at,omitempty" faker:"-"`
}

func (bf *Factory) Authentication() *AuthenticationFactory {
	f := &AuthenticationFactory{
		Factory: bf,
	}

	err := faker.FakeData(&f.Fields)

	if err != nil {
		panic(err) // unrecoverable situation
	}

	f.builder = f.data.Authentication.
		Create().
		SetToken(f.Fields.Token).
		SetCreatedIP(f.Fields.CreatedIP).
		SetLastUsedIP(f.Fields.LastUsedIP).
		SetNillableLastPasswordChallengeAt(f.Fields.LastPasswordChallengeAt).
		SetNillableLastCaptchaChallengeAt(f.Fields.LastCaptchaChallengeAt)

	return f
}

func (f *AuthenticationFactory) With(cb func(*data.AuthenticationCreate)) *AuthenticationFactory {
	cb(f.builder)

	return f
}

func (f *AuthenticationFactory) Create(ctx context.Context) *data.Authentication {
	if _, exists := f.builder.Mutation().PersonID(); !exists {
		f.builder.SetPerson(
			f.Person().Create(ctx),
		)
	}

	return f.builder.SaveX(ctx)
}

// Authorization factory
type AuthorizationFactory struct {
	*Factory

	Fields  AuthorizationFields
	builder *data.AuthorizationCreate
}

type AuthorizationFields struct {
	PersonID  types.ID           `json:"person_id,omitempty"`
	Token     []byte             `json:"token,omitempty" faker:"slice_len=64"`
	Kind      authorization.Kind `json:"kind,omitempty" faker:"oneof:email,password"`
	CreatedAt time.Time          `json:"created_at,omitempty"`
}

func (bf *Factory) Authorization() *AuthorizationFactory {
	f := &AuthorizationFactory{
		Factory: bf,
	}

	err := faker.FakeData(&f.Fields)

	if err != nil {
		panic(err) // unrecoverable situation
	}

	f.builder = f.data.Authorization.
		Create().
		SetToken(f.Fields.Token).
		SetKind(f.Fields.Kind)

	return f
}

func (f *AuthorizationFactory) With(cb func(*data.AuthorizationCreate)) *AuthorizationFactory {
	cb(f.builder)

	return f
}

func (f *AuthorizationFactory) Create(ctx context.Context) *data.Authorization {
	if _, exists := f.builder.Mutation().PersonID(); !exists {
		f.builder.SetPerson(
			f.Person().Create(ctx),
		)
	}

	return f.builder.SaveX(ctx)
}

// Person factory
type PersonFactory struct {
	*Factory

	Fields  PersonFields
	builder *data.PersonCreate
}

type PersonFields struct {
	StripeID        *string        `json:"stripe_id,omitempty"`
	Email           string         `json:"email,omitempty" faker:"email"`
	EmailVerifiedAt *time.Time     `json:"email_verified_at,omitempty" faker:"-"`
	Phone           *string        `json:"phone,omitempty" faker:"phone"`
	Password        string         `json:"password,omitempty"`
	TaxID           string         `json:"tax_id,omitempty" faker:"tax_id"`
	FirstName       string         `json:"first_name,omitempty" faker:"first_name"`
	LastName        *string        `json:"last_name,omitempty" faker:"last_name"`
	Language        string         `json:"language,omitempty" faker:"oneof:ca,en,es"`
	Birthdate       *time.Time     `json:"birthdate,omitempty" faker:"birthdate"`
	Gender          *person.Gender `json:"gender,omitempty" faker:"oneof:woman,man,nonbinary"`
	Address         *string        `json:"address,omitempty" faker:"address"`
	PostalCode      *string        `json:"postal_code,omitempty" faker:"postal_code"`
	City            *string        `json:"city,omitempty" faker:"city"`
	Country         *string        `json:"country,omitempty" faker:"country"`
	Subscribed      bool           `json:"subscribed,omitempty" faker:"-"`
	CreatedAt       time.Time      `json:"created_at,omitempty"`
	UpdatedAt       time.Time      `json:"updated_at,omitempty"`
}

func (bf *Factory) Person() *PersonFactory {
	f := &PersonFactory{
		Factory: bf,
	}

	err := faker.FakeData(&f.Fields)

	if err != nil {
		panic(err) // unrecoverable situation
	}

	f.builder = f.data.Person.
		Create().
		SetNillableStripeID(f.Fields.StripeID).
		SetEmail(f.Fields.Email).
		SetNillableEmailVerifiedAt(f.Fields.EmailVerifiedAt).
		SetNillablePhone(f.Fields.Phone).
		SetPassword(f.Fields.Password).
		SetTaxID(f.Fields.TaxID).
		SetFirstName(f.Fields.FirstName).
		SetNillableLastName(f.Fields.LastName).
		SetLanguage(f.Fields.Language).
		SetNillableBirthdate(f.Fields.Birthdate).
		SetNillableGender(f.Fields.Gender).
		SetNillableAddress(f.Fields.Address).
		SetNillablePostalCode(f.Fields.PostalCode).
		SetNillableCity(f.Fields.City).
		SetNillableCountry(f.Fields.Country)

	return f
}

func (f *PersonFactory) With(cb func(*data.PersonCreate)) *PersonFactory {
	cb(f.builder)

	return f
}

func (f *PersonFactory) Create(ctx context.Context) *data.Person {
	return f.builder.SaveX(ctx)
}
