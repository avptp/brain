package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"

	"github.com/avptp/brain/internal/api/reporting"
	"github.com/avptp/brain/internal/generated/api"
	"github.com/avptp/brain/internal/generated/data"
	"github.com/avptp/brain/internal/transport/request"
)

// CreateBillingCheckoutSession is the resolver for the createBillingCheckoutSession field.
func (r *mutationResolver) CreateBillingCheckoutSession(ctx context.Context) (*api.CreateBillingCheckoutSessionPayload, error) {
	// Ensure that the mutation is authenticated
	viewer := request.ViewerFromCtx(ctx)

	if viewer == nil {
		return nil, reporting.ErrUnauthenticated
	}

	// Fail if person cannot subscribe
	if !viewer.CanSubscribe() {
		return nil, reporting.ErrValidation
	}

	// Ensure that biller is ready for this person
	d := data.FromContext(ctx) // transactional data client for mutations
	err := r.biller.PreparePerson(ctx, d, viewer)

	if err != nil {
		return nil, err
	}

	// Create checkout session
	url, err := r.biller.CreateCheckoutSession(viewer)

	if err != nil {
		return nil, err
	}

	// Return payload
	return &api.CreateBillingCheckoutSessionPayload{
		CheckoutSessionURL: url,
	}, nil
}

// CreateBillingPortalSession is the resolver for the createBillingPortalSession field.
func (r *mutationResolver) CreateBillingPortalSession(ctx context.Context) (*api.CreateBillingPortalSessionPayload, error) {
	// Ensure that the mutation is authenticated
	viewer := request.ViewerFromCtx(ctx)

	if viewer == nil {
		return nil, reporting.ErrUnauthenticated
	}

	// Ensure that biller is ready for this person
	d := data.FromContext(ctx) // transactional data client for mutations
	err := r.biller.PreparePerson(ctx, d, viewer)

	if err != nil {
		return nil, err
	}

	// Create portal session
	url, err := r.biller.CreatePortalSession(viewer)

	if err != nil {
		return nil, err
	}

	// Return payload
	return &api.CreateBillingPortalSessionPayload{
		PortalSessionURL: url,
	}, nil
}
